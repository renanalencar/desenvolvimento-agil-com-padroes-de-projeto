package br.dev.rca.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.Before;
import org.junit.jupiter.api.Test;

import br.dev.rca.Achievement;
import br.dev.rca.AchievementStorage;
import br.dev.rca.AchievementStorageFactory;
import br.dev.rca.CreationPointsObserver;
import br.dev.rca.ForumServiceGamificationProxy;
import br.dev.rca.ParticipationPointsObserver;
import br.dev.rca.Points;

/**
 * @author renanalencar
 *
 */
class ForumServiceGamificationProxyTest {
	
	private AchievementStorage achievementStorage;
	private ForumServiceGamificationProxy proxy;
	private ForumServiceMock mockService;
	
	@Before
	void setUp() throws Exception {
		this.achievementStorage = AchievementStorageFactory.getAchievementStorage();
		this.achievementStorage.addObserver(new CreationPointsObserver());
		this.achievementStorage.addObserver(new ParticipationPointsObserver());
		
		this.mockService = new ForumServiceMock();
		this.proxy = new ForumServiceGamificationProxy(mockService);
	}

	@Test
	void testAddTopic() {
		this.proxy.addTopic("Mario", "Hello world!");
		Points points = (Points) this.achievementStorage.getAchievement("Mario", "CREATION");
		assertEquals(5, points.getAmount());
	}
	
	@Test
	void testAddComment() {
		proxy.addTopic("johnowl", "Hello world!");
		this.proxy.addComment("bot", "Hello World!", "I like this.");

		Points points = (Points) this.achievementStorage.getAchievement("bot", "PARTICIPATION");

		assertEquals(3, points.getAmount());
	}
	
	@Test
	void testLikeTopic() {
		proxy.addTopic("johnowl", "Hello world!");
		proxy.likeTopic("bot", "Hello world!", "johnowl");

		Points points = (Points) storage.getAchievement("bot", "CREATION");

		assertEquals(1, points.getAmount());
	}
	
	@Test
	void testLikeComment() {
		proxy.addTopic("johnowl", "Hello world!");
		proxy.addComment("bot", "Hello world!", "I like this.");
		proxy.likeComment("jack", "Hello world", "I like this.", "bot");

		Points points = (Points) storage.getAchievement("jack", "PARTICIPATION");

		assertEquals(1, points.getAmount());
	}
	
	@Test
	void testAddTopicTwice() {
		proxy.addTopic("johnowl", "Hello world!");
		proxy.addTopic("johnowl", "Hello galaxy!");

		Points points = (Points) storage.getAchievement("johnowl", "CREATION");

		assertEquals(10, points.getAmount());
	}
	
	@Test
	void testInvokingSerevalMethods() {
		proxy.addTopic("johnowl", "Hello world!");
		proxy.addTopic("johnowl", "Hello galaxy!");
		proxy.likeTopic("johnowl", "Hello world", "Hi there!");
		proxy.likeTopic("johnowl", "Hello world", "Hello!");
		proxy.likeTopic("johnowl", "Hello world", "Hoorray!");

		Points points = (Points) storage.getAchievement("johnowl", "CREATION");

		assertEquals(13, points.getAmount());
	}
	
	@Test
	void testMockException() {
		service.shoudThrowException = true;

		try {
			proxy.addTopic("johnowl", "Hello world!");
			fail();
		} catch (Exception e) {
					
		}

		Achievement points = storage.getAchievement("johnowl", "CREATION");
		assertTrue(points instanceof AchievementNotFound);
	}
	
	@Test
	void testWhenHundredPointsCreationGetBadgeInventor() {
		for(int i = 0; i < 20; i++) {
			proxy.addTopic("johnowl", "Hello world " + i);
		}			

		Points points = (Points)storage.getAchievement("johnowl", "CREATION");
		Achievement badge1 = storage.getAchievement("johnowl", "I CAN TALK");
		Achievement badge2 = storage.getAchievement("johnowl", "INVENTOR");

		assertEquals(100, points.getAmount());
		assertEquals("I CAN TALK", badge1.getName());
		assertEquals("INVENTOR", badge2.getName());
	}
	
	@Test
	void testWhenHundredPointsParticipationGetBadgePartOfTheCommunity() {
		proxy.addTopic("johnowl", "Hello world");
		for(int i = 0; i < 34; i++) {
			proxy.addComment("johnowl", "Hello world", "Hi!");
		}

		Points points = (Points)storage.getAchievement("johnowl", "PARTICIPATION");
		Achievement badge = storage.getAchievement("johnowl", "PART OF THE COMMUNITY");

		assertEquals(102, points.getAmount());		
		assertEquals("PART OF THE COMMUNITY", badge.getName());
	}

}
